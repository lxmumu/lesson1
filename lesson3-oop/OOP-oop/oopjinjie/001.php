<?php
/**
 * @Author: anchen
 * @Date:   2017-09-22 21:34:35
 * @Last Modified by:   anchen
 * @Last Modified time: 2017-09-22 22:38:24
 */
class Clac{
    public function calc($num1,$num2,$op){
        switch ($op){
            case'+':
            return $num1+$num2;
            break;
            case'-':
            return $num1-$num2;
            break;
        }
    }
}
$p1= new Clac();
echo $p1->calc(1,2,'+');


// 1，找出变化的因素
// 变化的因素要依赖于抽象，不要依赖与具体
// 稳定的元素可以直接依赖
// 2， 抽象稳定接口
// 通过接口隔离变化，当变化的我们通过子类来实现
// 3，完成具体功能
// 遵循依赖倒置原则
// 4，创建型模式创建对象
// 使用者和创建者分离，要么创建对象，要么使用对象，不应该兼而有之
// 5，解耦具体依赖

// 面向对象的设计原则
// 1 开闭原则OCP(open-close Principle)
// 对扩展开放，对源代码修改封闭
//
// 优点：提高系统的可扩展性和可维护性
// 2 单一职责原则SRP
// 类的功能要单一，避免一个类承担的太多的责任
// 一个类最好只有一个引起他变化的原因，如果一个类有多个原因引起变化，那就需要将每个变化的放到单独的类中，避免相同的职责分散到不同模块中
// 3 组合、聚合复用原则CARP
// 4 接口隔离原则ISP
// 5 里氏替换原则LSP
// 6 依赖倒置原则DIP
// 7 迪米特法则LOD