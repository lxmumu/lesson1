
项目开发流程：
1.需求调研，分析
 结果：项目需求说明书
 2.项目概要和详细设计
 结果：概要设计说明书，详细设计说明说
 3.界面设计
  结果：界面效果图
 4.前端页面设计
 结果：html页面：html css js
 5.前台功能实现
 结果：php代码文件
 6.功能测试
 结果：反馈问题，并最终得到可用产片
 7.发布上线，运营维护
 结果：运维人员


 模版技术：
 整体上功能不变，但界面经常需要更换为不同的风格
 mvc框架：
 M： model 模型 模型文件，专门产生数据
 V:  view  视图 专门显示数据
 C： controller 控制器  (主文件)(载入model.php view.html)
   控制器文件:专门把控整体的局面，根据用户的请求，决定从哪里或的什么数据（模型的工作）并决定将数据显示到哪里（视图的工作）
mvc的典型实现（带数据库）：
mvc思想的框架结构图：
 用户浏览器-->发出请求 -->控制器 controller.php
 控制器 controller.php-->先调用模型，获取数据-->model.php文件
 -->在载入视图，显示数据 view.html
 说明：
 1，用户（浏览器）直接请求的是控制器文件，也就是，控制器文件才能“知道”
     1.1 用户要什么--目标
     1.2 用户给了什么--请求数据，比如 get数据，post数据
 2，控制器根据用户的请求信息，决定如下事情
    2.1 找到哪个模型
    2.2 获取什么数据
    2.3 显示数据到那哪个视图中--载入视图文件
3，模型文件，它只是根据控制器的要求（调用），来产生数据，并返回该数据；
4，视图文件，他负责如何显示数据，而且由控制器决定显示那些数据
    数据显示在页面的哪里和什么效果，都是视图文件的作用（任务）--即html和css。
5，模型文件和视图文件，没有直接关系！

模型层：

是用于根据控制器的要求（调用）来“生产”某些数据，并返回给控制器
通常，模型的作用是，跟数据库打交道，以完成数据库的有关操作，待女性的就是增删改查
其典型代码模式如下：
  class ModeDemo{
   function f1(){
   //$db=获取mysqldb工具类对象();
   //$sql='sql语句';
  // $result =$db->
     $result ='获取数据库中的数据1()';
     return $result;
   }
   function f2(){
    $result ='获取数据库中的数据2()';
     return $result;
   }
   ...
  }

  控制器层调用模型层：
  1 载入模型文件
  2 对模型类实例化以获得模型对象
  3 调用模型类对象的方法，获得相应的数据--不同的方法获得不同的数据

  class XXXmodel{
//模型类成员定义
  }
 // 则其文件名命名为xxxmodel.class.php,且该文件中，通常只有该类的定义